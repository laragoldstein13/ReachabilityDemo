trigger: none

variables:
  imageName: 'reachabilitydemo'
  tag: '$(Build.BuildId)'

stages:
  - stage: Scan
    displayName: 'Download Endorctl, Install Dependencies, and Scan Codebase'
    jobs:
      - job: PrepareAndScan
        displayName: 'Prepare Environment and Run Scan'
        variables:
          - group: tenant-variables
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - bash: |
              echo "Downloading latest version of endorctl"
              VERSION=$(curl https://api.endorlabs.com/meta/version | grep -o '"Version":"[^"]*"' | sed 's/.*"Version":"\([^"]*\)".*/\1/')
              curl https://storage.googleapis.com/endorlabs/"$VERSION"/binaries/endorctl_"$VERSION"_linux_amd64 -o endorctl
              echo "$(curl -s https://api.endorlabs.com/sha/latest/endorctl_linux_amd64)  endorctl" | sha256sum -c
              if [ $? -ne 0 ]; then
                echo "Integrity check failed"
                exit 1
              fi
              chmod +x ./endorctl
              alias endorctl="$PWD/endorctl"
            displayName: 'Download Endorctl'

          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Install dependencies'

          - script: |
              ./endorctl scan -n $(NAMESPACE) -s scanresults.sarif
            displayName: 'Run security scan'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'scanresults.sarif'
              ArtifactName: 'CodeAnalysisLogs'

  - stage: Build
    displayName: 'Build and Push Image'
    dependsOn: Scan
    jobs:
      - job: BuildImage
        displayName: 'Build Docker Image'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Docker@2
            displayName: 'Build and Push Docker image'
            inputs:
              containerRegistry: '$(dockerConnection)'
              repository: '$(imageName)'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              tags: |
                $(tag)

  - stage: Deploy
    displayName: 'Deploy to Kubernetes'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: Deploy
        displayName: 'Deploy Application'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          - task: AzureCLI@2
            displayName: 'Update and Deploy Deployment YAML'
            inputs:
              azureSubscription: '$(subscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                #!/bin/bash
                az aks get-credentials --resource-group $(resourceGroup) --name $(clusterName)
                fullImageName=$(containerRegistry)/$(imageName):$(tag)
                sed -i "s|IMAGE_NAME_PLACEHOLDER|$fullImageName|g" deployment.yaml
                kubectl apply -f deployment.yaml --validate=false
